给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。


解法1：滑动窗口
解题思路
1.left不动，right向后移动
2.当right遇到重复字符，left应该放在上一个重复字符的位置的后一位，同时记录最长的长度
3.怎样判断是否遇到重复字符，且怎么知道上一个重复字符的位置？--用哈希字典的key来判断是否重复，用value来记录该字符的下一个不重复的位置。

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s == null) return 0;
        int len = s.length();
        Map<Character,Integer> map = new HashMap<>();
        int left = 0,right = 0,res = 0;
        while(right < len){
            char temp = s.charAt(right);
            if(map.containsKey(temp)){
                left = Math.max(left,map.get(temp));
            }
            res = Math.max(res,right-left+1);
            map.put(temp,right+1);
            right++;
        }
        return res;
    }
}
